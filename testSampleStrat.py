import numpy as np
import matplotlib.pyplot as plt
import math

regionsBudget = 25

def w1Formula(x1, x2, x3):
    return (0.33333 - (x2 * x2)/(2 * (x2 - x3)) + (x3 * x2 * x2) / (x2 - x3) - x3 * x3 + x3 * x3 / (2 * (x2 - x3)) - x3 * x3 * x3 / (x2 - x3)) / (x1 * x1 - x3 * x3 + (x1 - x3) * (x3 * x3 - x2 * x2) / (x2 - x3))

def foo(x):
    return 0.2 * math.sin(100*x) + 0.1 * math.sin(40*x) - 2 * (x - 0.6) * (x-0.6) + 0.15 * math.cos(30*x) + 1

def pdf(x):
    #return -3 * (x - 0.5) ** 2 + 1.25
    return -1.786 * x * x + 2.099 * x + 0.546
    #return -1.4067136589943 * x * x + 1.65308956 * x + 0.43

def cdf(x):
    #return -1/8.0 - (x - 0.5) ** 3 + 1.25*x
    return -0.595 * x * x * x + 1.05 * x * x + 0.546 * x
    #return -0.468904553 * x * x * x + 0.82654478 * x * x + 0.43 * x

def invCdf(x):
    start = 0
    end = 1.0
    tempY = (start + end) / 2
    tempX = cdf(tempY)
    while abs(tempX - x) > 0.0001:
        tempY = (start + end) / 2
        tempX = cdf(tempY)
        if tempX > x:
            end = tempY
        else:
            start = tempY 
    return tempY

def primaryFoo(x):
    return foo(invCdf(x)) / pdf(invCdf(x))
    #return 3
    #return invCdf(x)

fooCoefs = [0.72624924279789049297,68.285299109335554135,0.91533935660223864073,46.64767980708291617,0.59432415873886235147,37.477020441523684724,0.51535824939423646729,55.406018503334408365]
def foo2(x):
    return fooCoefs[0] * math.sin(fooCoefs[1] * x) + fooCoefs[2] * math.sin(fooCoefs[3] * x) + fooCoefs[4] * math.cos(fooCoefs[5] * x) + fooCoefs[6] * math.cos(fooCoefs[7] * x)

def determinant(a, b, c, d, e, f, g, h, i):
    return a * (e*i - h*f) - b * (d*i - g*f) + c * (d*h - g*e)

def polyInt(start, end, a, b, c):
    a /= 3
    b /= 2
    integral = 0
    integral += a * end * end * end
    integral += b * end * end
    integral += c * end
    integral -= a * start * start * start
    integral -= b * start * start
    integral -= c * start
    return integral

def getCoefs(x1, x3, testFunc, coefs):
    x2 = (x1 + x3) / 2.0
    y1 = testFunc(x1)
    y2 = testFunc(x2)
    y3 = testFunc(x3)

    D = determinant(x1*x1, x1, 1, x2*x2, x2, 1, x3*x3, x3, 1)
    Da = determinant(y1, x1, 1, y2, x2, 1, y3, x3, 1)
    Db = determinant(x1*x1, y1, 1, x2*x2, y2, 1, x3*x3, y3, 1)
    Dc = determinant(x1*x1, x1, y1, x2*x2, x2, y2, x3*x3, x3, y3)

    a = 0
    b = 0
    c = 0
    if (D == 0):
        a = 0
        b = 0
        c = y2
    else:
        a = Da / D
        b = Db / D
        c = Dc / D
    coefs[0] = a
    coefs[1] = b
    coefs[2] = c

def pdf2(x):
    pdfCoefs = [0,0,0]
    getCoefs(0,1,foo2,pdfCoefs)
    minValX = 0
    if pdfCoefs[0] < 0:
        minValX = 0
        if (pdfCoefs[0] * minValX * minValX + pdfCoefs[1] * minValX + pdfCoefs[2] > pdfCoefs[0] * 1 * 1 + pdfCoefs[1] * 1 + pdfCoefs[2]):
            minValX = 1
    else:
        minValX = -pdfCoefs[1] / (2 * pdfCoefs[0])
    minVal = pdfCoefs[0] * minValX * minValX + pdfCoefs[1] * minValX + pdfCoefs[2]
    if minVal < 0:
        pdfCoefs[2] -= minVal
    tempIntegral = polyInt(0,1,pdfCoefs[0],pdfCoefs[1],pdfCoefs[2])
    #print(tempIntegral)
    pdfCoefs[0] /= tempIntegral
    pdfCoefs[1] /= tempIntegral
    pdfCoefs[2] /= tempIntegral
    return pdfCoefs[0] * x * x + pdfCoefs[1] * x + pdfCoefs[2]

def cdf2(x):
    pdfCoefs = [0,0,0]
    getCoefs(0,1,foo2,pdfCoefs)
    minValX = 0
    if pdfCoefs[0] < 0:
        minValX = 0
        if (pdfCoefs[0] * minValX * minValX + pdfCoefs[1] * minValX + pdfCoefs[2] > pdfCoefs[0] * 1 * 1 + pdfCoefs[1] * 1 + pdfCoefs[2]):
            minValX = 1
    else:
        minValX = -pdfCoefs[1] / (2 * pdfCoefs[0])
    minVal = pdfCoefs[0] * minValX * minValX + pdfCoefs[1] * minValX + pdfCoefs[2]
    if minVal < 0:
        pdfCoefs[2] -= minVal
    tempIntegral = polyInt(0,1,pdfCoefs[0],pdfCoefs[1],pdfCoefs[2])
    pdfCoefs[0] /= tempIntegral
    pdfCoefs[1] /= tempIntegral
    pdfCoefs[2] /= tempIntegral
    return polyInt(0,x,pdfCoefs[0],pdfCoefs[1],pdfCoefs[2])

def invCdf2(x):
    start = 0
    end = 1.0
    tempY = (start + end) / 2
    tempX = cdf2(tempY)
    while abs(tempX - x) > 0.0001:
        tempY = (start + end) / 2
        tempX = cdf2(tempY)
        if (tempX > x):
            end = tempY
        else:
            start = tempY
    return tempY

def primaryFoo2(x):
    return foo2(invCdf2(x)) / pdf2(invCdf2(x))

# plt.plot(np.arange(0,1,0.001), foo(np.arange(0,1,0.001)), linestyle='-', label='Foo')
# plt.show()

x = np.linspace(0.0, 1.0, 1000)
#for i in range(0, 1000):
foo_vec = np.vectorize(foo)
foo2_vec = np.vectorize(primaryFoo)
#foo22_vec = np.vectorize(primaryFoo2)
pdf_vec = np.vectorize(pdf)
#pdf2_vec = np.vectorize(pdf2)

plt.subplot(1, 2, 1)
y = [0] * 1000
y2 = [0] * 1000
for i in range(0,1000):
    y[i] = foo(x[i])
    #y2[i] = pdf(x[i])
    y2[i] = invCdf(x[i])
plt.plot(x, y)
plt.plot(x, y2)

plt.subplot(1, 2, 2)
y = [0] * 1000
y2 = [0] * 1000
for i in range(0,1000):
    y[i] = foo(invCdf(x[i]))
    #y[i] = foo2(x[i])
    y2[i] = pdf(invCdf(x[i]))
plt.plot(x, y)
plt.plot(x, y2)
plt.show()

plt.subplot(1, 2, 1)
y = foo_vec(x)
y2 = pdf_vec(x)
#plt.plot(x, y)
#plt.plot(x, y2)

est = 0
x = np.linspace(0.0, 1.0, 10000)
y = [0] * 10000
y2 = [0] * 10000
for i in range(0,10000):
    y[i] = foo2(x[i])
    est += foo2(x[i])
    y2[i] = pdf2(x[i])
est /= 10000
print(est)
plt.plot(x, y)
plt.plot(x, y2)

plt.subplot(1, 2, 2)
#y = foo22_vec(x)
#y = foo_vec(x)
y = [0] * 10000
y2 = [0] * 10000
est = 0
for i in range(0,10000):
    y[i] = foo2(invCdf2(x[i]))
    #y[i] = foo2(x[i])
    #y2[i] = pdf2(invCdf2(x[i]))
    y2[i] = primaryFoo2(x[i])
    est += primaryFoo2(x[i])
est /= 10000
print(est)
plt.plot(x, y)
plt.plot(x, y2)
plt.show()

print(foo(invCdf(0.9)))
print(pdf(invCdf(0.9)))
print(invCdf(0.9))

x = np.linspace(0.0, 0.25, 100)
y = -2.08897 * x**2 - 0.560147 * x + 0.783074
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.25, linestyle='--', color='red')

x = np.linspace(0.25, 0.5, 100)
y = -3.38676 * x**2 + 3.61422 * x + -0.169406
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.5, linestyle='--', color='red')

x = np.linspace(0.5, 0.625, 100)
y = 8.45619 * x**2 + -6.32399 * x + 1.83896
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.625, linestyle='--', color='red')

x = np.linspace(0.625, 0.75, 100)
y = -6.11312 * x**2 + 3.64454 * x + 1.29977
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.75, linestyle='--', color='red')

x = np.linspace(0.75, 0.875, 100)
y = -50.6355 * x**2 + 83.3905 * x + -33.4658
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.875, linestyle='--', color='red')

x = np.linspace(0.875, 0.9375, 100)
y = -317.799 * x**2 + 571.103 * x + -255.667
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.9375, linestyle='--', color='red')

x = np.linspace(0.9375, 1, 100)
y = -360.013 * x**2 + 702.895 * x + -342.12
#plt.plot(x, y, color='orange')

myRegions = [[0, 0.0078125, -1805.3717256148083834, 93.815580715371368115, 1.1096824081330987077],
[0.0078125, 0.015625, -2728.667883796908427, 107.79610836531014684, 1.0568130611476203029],
[0.015625, 0.0234375, -3100.6505952562583843, 118.80567021642173131, 0.97560474888888748524],
[0.0234375, 0.03125, -2820.2542063938017236, 105.02232556322178425, 1.1446255525428554733],
[0.03125, 0.0625, 23.984296635931968922, -99.08792976382062534, 4.7454943683979529112],
[0.0625, 0.0703125, 2620.7666029296669876, -398.13233015990499553, 13.292088509193320078],
[0.0703125, 0.078125, 2725.7294960034778342, -412.27670234241850267, 13.76769412536003756],
[0.078125, 0.0859375, 2235.8027169136912562, -335.19811162211772171, 10.736204976617102602],
[0.0859375, 0.09375, 1309.0140516090323217, -175.59323281240722281, 3.8647303146171338994],
[0.09375, 0.109375, -309.64045843936037272, 131.94634873817994958, -10.740649801028268939],
[0.109375, 0.1171875, -1436.6651635996822733, 374.28118221511613228, -23.763548933062320856],
[0.1171875, 0.125, -1596.9823473228170769, 411.35970708461809409, -25.90706708563442362],
[0.125, 0.140625, -968.08093526657830807, 251.27590624755157478, -15.723176544379853681],
[0.140625, 0.15625, 460.7433096399254282, -150.43785186602690374, 12.512263112845317892],
[0.15625, 0.171875, 977.73242802981985733, -308.89277029216827941, 24.649039468739189829],
[0.171875, 0.1875, -69.358925771965004969, 53.541146938934616628, -6.7121480118955645366],
[0.1875, 0.203125, -1531.9645282870478695, 600.97804231267946307, -57.936837681051940763],
[0.203125, 0.2109375, -1854.1692408257513307, 729.52178669953718781, -70.753194837014007135],
[0.2109375, 0.21875, -1430.1301385387778282, 550.14367570259491913, -51.783087046599007408],
[0.21875, 0.234375, -24.062140153197105974, -69.620286937060882337, 16.507729076831097359],
[0.234375, 0.2421875, 1617.3180884174653329, -834.48352560194325633, 105.60884179408731143],
[0.2421875, 0.25, 2405.4493944781715982, -1215.8306622103009431, 151.73867900952063792],
[0.25, 0.2578125, 2697.1596656643669121, -1361.1354563934146427, 169.8329856061600367],
[0.2578125, 0.265625, 2410.4155453925486654, -1212.7215290685126092, 150.62912317669270124],
[0.265625, 0.28125, 1050.0510610854253173, -485.25418461392837344, 53.378357844219181061],
[0.28125, 0.296875, -1257.0655159347224981, 811.95229521800501971, -128.96443849657015335],
[0.296875, 0.3046875, -2318.9961560887168162, 1438.2449928103305865, -221.30207501431641504],
[0.3046875, 0.3125, -2381.1133623353671283, 1475.5798987739253789, -226.91093609030576772],
[0.3125, 0.3203125, -1952.3044015514897183, 1207.1479511101788376, -184.90182752193504712],
[0.3203125, 0.328125, -1178.5460524035152048, 711.22065306711010635, -105.43779705243196076],
[0.328125, 0.34375, 135.39390848824405111, -154.28763088597042952, 37.090428259981422343],
[0.34375, 0.359375, 1151.3208974217996001, -850.19947093343944289, 156.26406306051808315],
[0.359375, 0.375, 860.40242290681453596, -638.93429117827281516, 117.91287370964585079],
[0.375, 0.40625, -84.829141089445329271, 72.058804115486964292, -15.786348338539369252],
[0.40625, 0.421875, 417.64306368243705947, -337.45287682694834075, 67.650230436465562889],
[0.421875, 0.4375, 725.32457435115065891, -595.49585204676259309, 121.75141205325121518],
[0.4375, 0.453125, 6.2943684615020174533, 35.742049939071875997, -16.788294719484028406],
[0.453125, 0.46875, -1274.8371650311237318, 1196.6034641026308236, -279.75879399201380693],
[0.46875, 0.4765625, -1782.3770507468143478, 1669.9783478798926808, -390.13327634264896915],
[0.4765625, 0.484375, -1592.4648957876488566, 1488.5174946280894801, -346.78713293523560424],
[0.484375, 0.5, -494.9086703525390476, 421.2290773791319225, -87.327004229477097397],
[0.5, 0.515625, 1536.4507387888443191, -1609.9249817375384737, 420.4101730435047557],
[0.515625, 0.5234375, 2463.0551714587199967, -2561.5961286684323568, 664.76008396649012866],
[0.5234375, 0.53125, 2384.2430291761411354, -2478.4922130693448707, 642.85386610328896495],
[0.53125, 0.5625, -111.79605061851907521, 198.30080740967241582, -74.743896670115873349],
[0.5625, 0.5703125, -2836.6676348798791878, 3238.2024382263916777, -922.52216429683721799],
[0.5703125, 0.578125, -3024.751010409090668, 3452.0538331615971401, -983.30897619137613219],
[0.578125, 0.5859375, -2513.5505337100476027, 2860.3149901756551117, -812.06773410411005898],
[0.5859375, 0.59375, -1405.5952483403962106, 1561.4460832118056715, -431.3979937080257514],
[0.59375, 0.609375, 795.17160092719132081, -1057.9681651084101759, 348.02293441028109555],
[0.609375, 0.6171875, 2662.3144237322267145, -3327.4230026841396466, 1037.6310987418764853],
[0.6171875, 0.625, 3218.534090803397703, -4013.3457768008374842, 1249.0986371744038479],
[0.625, 0.6328125, 3069.3168685162672773, -3826.1285530694294721, 1190.3758497981980327],
[0.6328125, 0.640625, 2264.2650946122594178, -2806.6688987554516643, 867.63335667427963926],
[0.640625, 0.65625, 299.18104311742354184, -283.07872663217131048, 57.429665002144702157],
[0.65625, 0.6640625, -1646.0781427389010787, 2264.2541838742326945, -776.50433392133436428],
[0.6640625, 0.671875, -2450.5136701919836923, 3332.1222739816876128, -1130.8963099052853067],
[0.671875, 0.6796875, -2673.6965908470883733, 3631.4307418188545853, -1231.2458419356662489],
[0.6796875, 0.6875, -2319.5174169890815392, 3149.4518231510883197, -1067.2727540844825853],
[0.6875, 0.71875, -109.51015637883392628, 91.998586800225893967, -9.8473983661056081473],
[0.71875, 0.734375, 1252.7562485721718986, -1849.9579240527236834, 682.18489047050343288],
[0.734375, 0.75, 515.79954045217164094, -766.11720014012826141, 283.68500538944772416],
[0.75, 0.78125, -152.71156844502229433, 234.3171596246415902, -90.603265679456285397],
[0.78125, 0.796875, 881.23773502935364377, -1378.1646568981959717, 538.07558055764138771],
[0.796875, 0.8125, 1042.8462282128748484, -1633.2958340208278969, 638.76026594773929901],
[0.8125, 0.828125, -91.930712459608912468, 212.9278860391350463, -112.16641686009643308],
[0.828125, 0.8359375, -1330.6181092176120728, 2261.2002074138727039, -958.91124513398608542],
[0.8359375, 0.84375, -1958.4717116235988215, 3310.5973615482798778, -1397.4029156100441469],
[0.84375, 0.8515625, -2206.0264253017958254, 3727.9102661744691432, -1573.272996982690529],
[0.8515625, 0.859375, -1983.4276153459213674, 3348.3291504194494337, -1411.4554148337047081],
[0.859375, 0.875, -852.23989952052943408, 1400.0665897633880377, -572.57812647001446749],
[0.875, 0.890625, 1124.6722011672682129, -2059.1552113888901658, 940.66762244905339685],
[0.890625, 0.8984375, 2038.8707134295254946, -3683.8975802812492475, 1662.5497502272774],
[0.8984375, 0.90625, 2068.9574503166950308, -3737.4887874198029749, 1686.4123890056653181],
[0.90625, 0.921875, 1298.2176957968622446, -2337.3795704360236414, 1050.563541535191689],
[0.921875, 0.9375, -287.20684774877736345, 585.66408613993553445, -296.73870728031761246],
[0.9375, 0.953125, -1080.2248207955562975, 2069.846655451663537, -991.17141313694003202],
[0.953125, 0.96875, -495.28833942795972689, 952.59517206648160936, -457.67504009814638266],
[0.96875, 0.984375, 502.26083857409685152, -979.4320399792122771, 477.79979807504059863],
[0.984375, 1, 527.09521225388743915, -1025.5825160015956499, 499.16481032773890547]]

def polyApprox(x, regions):
    low = 0
    high = regionsBudget
    curr =  (low + high) // 2
    #print(len(regions))

    while (regions[curr][0] > x or regions[curr][1] < x):
        if (regions[curr][0] > x):
            high = curr
            curr = (low + high) // 2
        elif (regions[curr][1] < x):
            low = curr
            curr = (low + high) // 2
        #print(curr)
    return regions[curr][2] * x * x + regions[curr][3] * x + regions[curr][4]


x2 = np.linspace(0, 1, 1000)
y2 = 1000 * [0]
#for i in range(1000):
#    y2[i] = polyApprox(x2[i], myRegions)

#for i in range(regionsBudget):
    #plt.axvline(x=myRegions[i][1], linestyle='--', color='red')

#y = polyApprox_vec(x, myRegions)
#plt.plot(x2, y2, color='red')

#plt.show()

x3 = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,31,33,34,36,38,40,42,44,46,49,51,54,57,60,63,66,70,73,77,81,85,90,94,99,104,109,115,121,127,134,141,148,156,164,172,181,190,200,210,221,232,244,257,270,284,298,314,330,347,365,383,403,424,445,468,492,518,544,572,601,632,665,699,735,772,812,854,897,943,992,1043,1096,1152,1211,1274,1339,1408,1480,1556,1635,1719,1808,1900,1998,2100,2208,2321,2440,2565,2697,2835,2980]
y3 = [0.19881573478375935693,0.18730402889899194774,0.17981642676325643171,0.14550719981197346442,0.14000896044598779011,0.13074562142177248436,0.13829478629225747111,0.1161813786877453486,0.11352150939493597936,0.099394559800244378089,0.096846308921870932762,0.11512631204989538791,0.10343348378549421795,0.10987325563872583911,0.10700035225198196998,0.12864589487798136491,0.11771409026069344639,0.085251199516692799385,0.11589480290305899379,0.093783898614478583555,0.12081336585175134202,0.11163693510716646284,0.073534379417529965872,0.086043319476065541207,0.094437406097770806856,0.095919288301446331557,0.10727850771940113106,0.086162697445179542433,0.10661648184279912122,0.088448729327862574134,0.095490561911085958258,0.093405952837959313473,0.11210000780501906681,0.10619374022151364945,0.11218042078372965353,0.10192742815978196591,0.098779621467505712706,0.092811816017132661716,0.099013002806622896212,0.11336113500572457535,0.1056369765762088242,0.10398222268503645727,0.10663282945568304527,0.097766805555841065911,0.097804345216647672889,0.077714142805064889696,0.08326781069906538657,0.09157403784565210092,0.093524851587341514825,0.08815586953153572991,0.10433971846869199984,0.073011457845735733274,0.10301914977186263367,0.080938753424741757825,0.07271121642931757667,0.11613073398959888882,0.0749439806241951334,0.081883069619998555266,0.085813859525056337962,0.12484300434509083833,0.097689461455199688711,0.11976192492674034296,0.065903949879716233751,0.12027813022995896552,0.10652073577665868709,0.078625464060164518276,0.08073559660903747992,0.1016380941389822129,0.10127541161702431627,0.11642690487646535635,0.1095149889306438612,0.10332607777350510947,0.11365772489994745154,0.089181774068244776266,0.12625507256521681376,0.11406539181899122415,0.12255149821482598516,0.10939397293676715595,0.086678445656694830257,0.12758979855736912734,0.088810967951317015823,0.076247556407582475768,0.10506297676779167982,0.090157754161101444357,0.1203906529356400662,0.090646956665950420562,0.085574391118885206886,0.11042461249658222511,0.09366617389956365114,0.097543314686238530298,0.09724004565901248065,0.10576721853571309506,0.083084832346985021401,0.074347855837150547686,0.09298464738453146583,0.11201264284328402154,0.11278224012852632041,0.09718599930601583281,0.081599925503713116592,0.067546473535157802726,0.10111384782643850766,0.09537027712033555038,0.096469652332829544661,0.14547583000755168192,0.084752085108411631675,0.085954729823070230577,0.082733380797543942808,0.13456429473579478717,0.10387778511213191512,0.08516221737795054425,0.076580817941072937272,0.080261304413204309638,0.11310732631020412042,0.067881118010579916122,0.10799399597054384903,0.087632777287990029635]
plt.scatter(x3, y3)
plt.yscale('log')
plt.xscale('log')
plt.show()

# for x1 in np.arange(0.0,1.0,0.1):
#    for x2 in np.arange(0.0,1.0,0.1):
#        for x3 in np.arange(0.0,1.0,0.1):
#            if (w1Formula(x1,x2,x3) < 0):
#                print(w1Formula(x1,x2,x3))
