import numpy as np
import matplotlib.pyplot as plt
import math

regionsBudget = 25

def w1Formula(x1, x2, x3):
    return (0.33333 - (x2 * x2)/(2 * (x2 - x3)) + (x3 * x2 * x2) / (x2 - x3) - x3 * x3 + x3 * x3 / (2 * (x2 - x3)) - x3 * x3 * x3 / (x2 - x3)) / (x1 * x1 - x3 * x3 + (x1 - x3) * (x3 * x3 - x2 * x2) / (x2 - x3))

def foo(x):
    return 0.2 * math.sin(100*x) + 0.1 * math.sin(40*x) - 2 * (x - 0.6) * (x-0.6) + 0.15 * math.cos(30*x) + 1

def pdf(x):
    #return -3 * (x - 0.5) ** 2 + 1.25
    return -1.786 * x * x + 2.099 * x + 0.546
    #return -1.4067136589943 * x * x + 1.65308956 * x + 0.43

def cdf(x):
    #return -1/8.0 - (x - 0.5) ** 3 + 1.25*x
    return -0.595 * x * x * x + 1.05 * x * x + 0.546 * x
    #return -0.468904553 * x * x * x + 0.82654478 * x * x + 0.43 * x

def invCdf(x):
    start = 0
    end = 1.0
    tempY = (start + end) / 2
    tempX = cdf(tempY)
    count = 0
    while count < 250 and abs(tempX - x) > 0.0001:
        tempY = (start + end) / 2
        tempX = cdf(tempY)
        if tempX > x:
            end = tempY
        else:
            start = tempY 
        count += 1
    return tempY

def primaryFoo(x):
    return foo(invCdf(x)) / pdf(invCdf(x))
    #return 3
    #return invCdf(x)


# plt.plot(np.arange(0,1,0.001), foo(np.arange(0,1,0.001)), linestyle='-', label='Foo')
# plt.show()

x = np.linspace(0.0, 1.0, 1000)
#for i in range(0, 1000):
foo_vec = np.vectorize(foo)
foo2_vec = np.vectorize(primaryFoo)
pdf_vec = np.vectorize(pdf)

plt.subplot(1, 2, 1)
y = foo_vec(x)
y2 = pdf_vec(x)
plt.plot(x, y)
plt.plot(x, y2)

plt.subplot(1, 2, 2)
y = foo2_vec(x)
#y = foo_vec(x)
plt.plot(x, y)

print(foo(invCdf(0.9)))
print(pdf(invCdf(0.9)))
print(invCdf(0.9))
cdf_vec = np.vectorize(cdf)
y = cdf_vec(x)
plt.plot(x,y)

x = np.linspace(0.0, 0.25, 100)
y = -2.08897 * x**2 - 0.560147 * x + 0.783074
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.25, linestyle='--', color='red')

x = np.linspace(0.25, 0.5, 100)
y = -3.38676 * x**2 + 3.61422 * x + -0.169406
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.5, linestyle='--', color='red')

x = np.linspace(0.5, 0.625, 100)
y = 8.45619 * x**2 + -6.32399 * x + 1.83896
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.625, linestyle='--', color='red')

x = np.linspace(0.625, 0.75, 100)
y = -6.11312 * x**2 + 3.64454 * x + 1.29977
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.75, linestyle='--', color='red')

x = np.linspace(0.75, 0.875, 100)
y = -50.6355 * x**2 + 83.3905 * x + -33.4658
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.875, linestyle='--', color='red')

x = np.linspace(0.875, 0.9375, 100)
y = -317.799 * x**2 + 571.103 * x + -255.667
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.9375, linestyle='--', color='red')

x = np.linspace(0.9375, 1, 100)
y = -360.013 * x**2 + 702.895 * x + -342.12
#plt.plot(x, y, color='orange')

myRegions = [[0, 0.015625, -760.82259772717770829, 29.765268646910840289, 0.43000000000000004885],
[0.015625, 0.03125, -797.39287972821603034, 26.542582185135586315, 0.48928276746939758368],
[0.03125, 0.0625, 725.42187799459520647, -71.514401269124576288, 2.0664397135763459268],
[0.0625, 0.125, 77.027572666716707772, -16.266022766368358532, 1.1462063123411083687],
[0.125, 0.1875, -32.053875241308446675, 18.589082911561717992, -1.5062842738372586027],
[0.1875, 0.203125, -741.23520629622180422, 307.15845205950381569, -30.680884819177094869],
[0.203125, 0.21875, -878.09219677353394218, 358.39065656119782943, -35.440739007347019651],
[0.21875, 0.25, 751.68989904346290132, -359.17098079029409519, 43.538249343923837387],
[0.25, 0.3125, 39.462822638684201593, -23.492477234152403298, 4.1328157301871044638],
[0.3125, 0.375, -101.68767304377433902, 74.978508878005555971, -12.85513933587218105],
[0.375, 0.5, 0.67580945989917040606, -1.0481821109799369651, 1.2600050579183381672],
[0.5, 0.5625, -102.28420328698916819, 107.49012566112310196, -27.269145641411114411],
[0.5625, 0.625, -92.017014324953379401, 113.09299054874014701, -33.669359898214793247],
[0.625, 0.640625, -495.54044078520382755, 646.54640237262356095, -209.45140382710360427],
[0.640625, 0.65625, -973.71902740513905883, 1255.0993035363062518, -403.06092739776613598],
[0.65625, 0.6875, 665.66021622658900014, -904.06387040629397234, 307.86818046145629069],
[0.6875, 0.75, -65.406481926851483877, 89.140436674120337557, -29.41653660724148267],
[0.75, 0.78125, -656.09452046864635122, 1015.2726134374547655, -391.75364749998254865],
[0.78125, 0.8125, 682.08177934967534384, -1085.6714573258250311, 432.85091228924761708],
[0.8125, 0.828125, -464.01344212042749859, 780.23626513464841992, -326.59718866126149805],
[0.828125, 0.84375, -1035.7941479434375651, 1723.265651754787541, -715.42132849491554225],
[0.84375, 0.875, 660.41389718503705808, -1148.0656966409487723, 499.71013646138180775],
[0.875, 0.9375, -92.797135289142261172, 163.8194472433278861, -71.512167699316535163],
[0.9375, 0.96875, -681.63924146393856063, 1308.9388716773464694, -627.52462072601724685],
[0.96875, 1, 645.39939341336685175, -1274.8247153639649696, 630.10169785590778702]]

def polyApprox(x, regions):
    low = 0
    high = regionsBudget
    curr =  (low + high) // 2
    #print(len(regions))

    while (regions[curr][0] > x or regions[curr][1] < x):
        if (regions[curr][0] > x):
            high = curr
            curr = (low + high) // 2
        elif (regions[curr][1] < x):
            low = curr
            curr = (low + high) // 2
        #print(curr)
    return regions[curr][2] * x * x + regions[curr][3] * x + regions[curr][4]


x2 = np.linspace(0, 1, 1000)
y2 = 1000 * [0]
for i in range(1000):
    y2[i] = polyApprox(x2[i], myRegions)

#for i in range(regionsBudget):
    #plt.axvline(x=myRegions[i][1], linestyle='--', color='red')

#y = polyApprox_vec(x, myRegions)
#plt.plot(x2, y2, color='red')

plt.show()

x3 = [5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,27,28,29,31,33,34,36,38,40,42,44,46,49,51,54,57,60,63,66,70,73,77,81,85,90,94,99,104,109,115,121,127,134,141,148,156,164,172,181,190,200,210,221,232,244,257,270,284,298,314,330,347,365,383,403,424,445,468,492,518,544,572,601,632,665,699,735,772,812,854,897,943,992,1043,1096,1152,1211,1274,1339,1408,1480,1556,1635,1719,1808,1900,1998,2100,2208,2321,2440,2565,2697,2835,2980]
y3 = [0.24169714604001216185,0.20437899031385103887,0.19746800633808142544,0.16990945741564220106,0.16085154460188741399,0.15115874532744927317,0.12901451819440212798,0.12203044524319020536,0.12717179109640830426,0.099750104799710595516,0.091196978062059605441,0.093622015933208929672,0.090067490821961013192,0.080585641455332715499,0.071319358297688442705,0.075209999636316540728,0.075103847338259338562,0.058264399023828426782,0.066540214008763934328,0.047940133559971724597,0.051080054221435577944,0.047830646778209050252,0.044013615764933088081,0.0464421549090057173,0.044937806646247871467,0.037679234962342919579,0.041938372861464706665,0.046671994931248954319,0.030307013201114636064,0.027895956833108762063,0.032979082502931307552,0.025122560908080217301,0.029234464905114051353,0.023101496097758179166,0.022410173026116173706,0.015826346468219742308,0.016975442026974242593,0.015337800345471962193,0.011007061045550672884,0.010138126428019568481,0.021177595846048613559,0.018924481319295801546,0.0061860223926417231763,0.0050367754147494806991,0.012613295783423367907,0.012170202827369254461,0.0074222625886045277485,0.0056475419091193785823,0.008545677019080289219,0.0056327137644148336446,0.0086921064886367506441,0.0082492577966130631317,0.009069376943148648243,0.0012526608753900304871,0.0068920683147638758803,0.0027127039893638446588,0.0024435922280808121225,0.0010919221576885288459,0.0010228989019078205125,0.00021629935852847617813,0.001490115782606453573,0.0012045212983138409244,5.912565641899947906e-05,6.6027026740536932394e-05,2.668050655379829904e-05,2.2228286740610549003e-05,0.001384307333275407257,1.7082067882234230508e-05,7.0441810388148824056e-06,0.00012871692270357331582,2.2890792800024230649e-05,1.4981181258025883012e-05,1.5768636921915323804e-05,5.5160373837675246507e-05,0.00054667792737853873261,1.7209178485562522316e-05,2.4540120202369456408e-05,3.8340233802490469053e-06,2.4021659331295201019e-05,5.0658376026729184242e-07,2.107756372135751187e-05,1.850889973827978604e-06,1.6099279829795390783e-06,6.596020296253645678e-06,1.1391203820204131315e-06,1.2764411232567551259e-06,8.5412535138914235083e-07,1.1997831107283237342e-07,7.7952785125010202146e-08,1.3894228906659843249e-07,1.3465129722408063179e-07,7.9341298508573687082e-08,3.806037010808736986e-08,1.5460656496019084077e-08,5.8375060173635207093e-09,2.7160682044012121815e-07,2.7522627021102516852e-08,7.7693062087682196627e-08,5.9184584834094985499e-08,1.6487473703702782482e-08,3.9983192035293146202e-09,1.2526485957022385568e-08,3.0751120040135328161e-09,2.5443083503217668134e-09,1.5135438722178434829e-09,6.5821914426905962258e-10,3.2213963327393629192e-10,2.9395089515718603939e-10,3.0179850464942099492e-10,3.102984125692525062e-10,3.3411985500553399899e-10,3.7056989342318979146e-10,4.0443699769249094174e-10,4.045960426117253504e-10,4.7588442341781305324e-10,4.6183539752166065557e-10]
plt.scatter(x3, y3)
plt.yscale('log')
plt.xscale('log')
plt.show()

# for x1 in np.arange(0.0,1.0,0.1):
#    for x2 in np.arange(0.0,1.0,0.1):
#        for x3 in np.arange(0.0,1.0,0.1):
#            if (w1Formula(x1,x2,x3) < 0):
#                print(w1Formula(x1,x2,x3))
