import numpy as np
import matplotlib.pyplot as plt
import math

regionsBudget = 10

def w1Formula(x1, x2, x3):
    return (0.33333 - (x2 * x2)/(2 * (x2 - x3)) + (x3 * x2 * x2) / (x2 - x3) - x3 * x3 + x3 * x3 / (2 * (x2 - x3)) - x3 * x3 * x3 / (x2 - x3)) / (x1 * x1 - x3 * x3 + (x1 - x3) * (x3 * x3 - x2 * x2) / (x2 - x3))

def foo(x):
    return 0.2 * math.sin(100*x) + 0.1 * math.sin(40*x) - 2 * (x - 0.6) * (x-0.6) + 0.15 * math.cos(30*x) + 1

def pdf(x):
    #return -3 * (x - 0.5) ** 2 + 1.25
    return -1.786 * x * x + 2.099 * x + 0.546
    #return -1.4067136589943 * x * x + 1.65308956 * x + 0.43

def cdf(x):
    #return -1/8.0 - (x - 0.5) ** 3 + 1.25*x
    return -0.595 * x * x * x + 1.05 * x * x + 0.546 * x
    #return -0.468904553 * x * x * x + 0.82654478 * x * x + 0.43 * x

def invCdf(x):
    start = 0
    end = 1.0
    tempY = (start + end) / 2
    tempX = cdf(tempY)
    while abs(tempX - x) > 0.0001:
        tempY = (start + end) / 2
        tempX = cdf(tempY)
        if tempX > x:
            end = tempY
        else:
            start = tempY 
    return tempY

def primaryFoo(x):
    return foo(invCdf(x)) / pdf(invCdf(x))
    #return 3
    #return invCdf(x)

fooCoefs = [0.72624924279789049297,68.285299109335554135,0.91533935660223864073,46.64767980708291617,0.59432415873886235147,37.477020441523684724,0.51535824939423646729,55.406018503334408365]
def foo2(x):
    return fooCoefs[0] * math.sin(fooCoefs[1] * x) + fooCoefs[2] * math.sin(fooCoefs[3] * x) + fooCoefs[4] * math.cos(fooCoefs[5] * x) + fooCoefs[6] * math.cos(fooCoefs[7] * x)

def determinant(a, b, c, d, e, f, g, h, i):
    return a * (e*i - h*f) - b * (d*i - g*f) + c * (d*h - g*e)

def polyInt(start, end, a, b, c):
    a /= 3
    b /= 2
    integral = 0
    integral += a * end * end * end
    integral += b * end * end
    integral += c * end
    integral -= a * start * start * start
    integral -= b * start * start
    integral -= c * start
    return integral

def getCoefs(x1, x3, testFunc, coefs):
    x2 = (x1 + x3) / 2.0
    y1 = testFunc(x1)
    y2 = testFunc(x2)
    y3 = testFunc(x3)

    D = determinant(x1*x1, x1, 1, x2*x2, x2, 1, x3*x3, x3, 1)
    Da = determinant(y1, x1, 1, y2, x2, 1, y3, x3, 1)
    Db = determinant(x1*x1, y1, 1, x2*x2, y2, 1, x3*x3, y3, 1)
    Dc = determinant(x1*x1, x1, y1, x2*x2, x2, y2, x3*x3, x3, y3)

    a = 0
    b = 0
    c = 0
    if (D == 0):
        a = 0
        b = 0
        c = y2
    else:
        a = Da / D
        b = Db / D
        c = Dc / D
    coefs[0] = a
    coefs[1] = b
    coefs[2] = c

def pdf2(x):
    pdfCoefs = [0,0,0]
    getCoefs(0,1,foo2,pdfCoefs)
    minValX = 0
    if pdfCoefs[0] < 0:
        minValX = 0
        if (pdfCoefs[0] * minValX * minValX + pdfCoefs[1] * minValX + pdfCoefs[2] > pdfCoefs[0] * 1 * 1 + pdfCoefs[1] * 1 + pdfCoefs[2]):
            minValX = 1
    else:
        minValX = -pdfCoefs[1] / (2 * pdfCoefs[0])
    minVal = pdfCoefs[0] * minValX * minValX + pdfCoefs[1] * minValX + pdfCoefs[2]
    if minVal < 0:
        pdfCoefs[2] -= minVal
    tempIntegral = polyInt(0,1,pdfCoefs[0],pdfCoefs[1],pdfCoefs[2])
    #print(tempIntegral)
    pdfCoefs[0] /= tempIntegral
    pdfCoefs[1] /= tempIntegral
    pdfCoefs[2] /= tempIntegral
    return pdfCoefs[0] * x * x + pdfCoefs[1] * x + pdfCoefs[2]

def cdf2(x):
    pdfCoefs = [0,0,0]
    getCoefs(0,1,foo2,pdfCoefs)
    minValX = 0
    if pdfCoefs[0] < 0:
        minValX = 0
        if (pdfCoefs[0] * minValX * minValX + pdfCoefs[1] * minValX + pdfCoefs[2] > pdfCoefs[0] * 1 * 1 + pdfCoefs[1] * 1 + pdfCoefs[2]):
            minValX = 1
    else:
        minValX = -pdfCoefs[1] / (2 * pdfCoefs[0])
    minVal = pdfCoefs[0] * minValX * minValX + pdfCoefs[1] * minValX + pdfCoefs[2]
    if minVal < 0:
        pdfCoefs[2] -= minVal
    tempIntegral = polyInt(0,1,pdfCoefs[0],pdfCoefs[1],pdfCoefs[2])
    pdfCoefs[0] /= tempIntegral
    pdfCoefs[1] /= tempIntegral
    pdfCoefs[2] /= tempIntegral
    return polyInt(0,x,pdfCoefs[0],pdfCoefs[1],pdfCoefs[2])

def invCdf2(x):
    start = 0
    end = 1.0
    tempY = (start + end) / 2
    tempX = cdf2(tempY)
    while abs(tempX - x) > 0.0001:
        tempY = (start + end) / 2
        tempX = cdf2(tempY)
        if (tempX > x):
            end = tempY
        else:
            start = tempY
    return tempY

def primaryFoo2(x):
    return foo2(invCdf2(x)) / pdf2(invCdf2(x))


def polyApprox(x, regions):
    low = 0
    high = regionsBudget
    curr =  (low + high) // 2
    #print("Starting",len(regions))
    #print(regions[curr][0], x, regions[curr][1])
    #print(x)

    while (regions[curr][0] > x or regions[curr][1] < x):
        if (regions[curr][0] > x):
            high = curr
            curr = (low + high) // 2
        elif (regions[curr][1] < x):
            low = curr
            curr = (low + high) // 2
        #print(curr)
    return regions[curr][2] * x * x + regions[curr][3] * x + regions[curr][4]


def residual(x, regions):
    return foo(x) - polyApprox(x,regions)

def sampleStep(x, myLambda):
    return (x > myLambda)

def gaussianDerivativeWRTMean1D(x, myLambda):
    return np.e ** (-0.5 * (x - myLambda) ** 2) * (x - myLambda) / ((2 * np.pi) ** 0.5)

def gaussianDerivativeWRTMeanTimesStep1D(x, gausMean, heavLambda):
    return sampleStep(x, heavLambda) * gaussianDerivativeWRTMean1D(x, gausMean)

print("Hello1")

myRegions = [[-6, -3, -0.000246655517845, -0.0025910090566, -0.00666645594572],
[-3, -1.5, -0.0382970930262, -0.215110555923, -0.301771158968],
[-1.5, -0.75, -0.0365893960328, -0.243537372575, -0.348253702182],
[-0.75, 0, 0.186342582297, 0.0791349744011, -0.231648679761],
[0, 1.5, 0.023233320224, 0.265406958526, -0.231648679761],
[1.5, 2.25, -0.214981864439, 0.783893698324, -0.473394623967],
[2.25, 3, 0.0173448519643, -0.256543879346, 0.691435924001],
[3, 3.75, 0.0660456150957, -0.529510209732, 1.07202804698],
[3.75, 4.5, 0.0219900403255, -0.199504389794, 0.454037742416],
[4.5, 6, 0.00123724626841, -0.0140334398988, 0.0396625475417]]

myRegions2 = [[-6, -4.8, -4.52749484461e-07, -5.17957789547e-06, -1.47787344856e-05],
[-4.8, -3.6, -0.000132798754884, -0.00120705754732, -0.00273454102333],
[-3.6, -2.4, -0.00768706624807, -0.0524065084377, -0.0891492575169],
[-2.4, -1.2, -0.0625097917814, -0.308779267927, -0.388664981219],
[-1.2, 0, 0.110738225879, 0.0299652711475, -0.231648679761],
[0, 1.2, 0.0994924422985, 0.196663963822, -0.231648679761],
[1.2, 2.4, -0.22086598816, 0.819853445969, -0.518159918478],
[2.4, 3.6, 0.0605465682243, -0.492605312423, 1.01080477689],
[3.6, 4.8, 0.01984637718, -0.18468945117, 0.429782152316],
[4.8, 6, 0.000615559627009, -0.0070901632333, 0.0203836066392]]

# plt.plot(np.arange(0,1,0.001), foo(np.arange(0,1,0.001)), linestyle='-', label='Foo')
# plt.show()

x = np.linspace(-6, 6, 1000)
#for i in range(0, 1000):
foo_vec = np.vectorize(foo)
foo2_vec = np.vectorize(primaryFoo)
#foo22_vec = np.vectorize(primaryFoo2)
pdf_vec = np.vectorize(pdf)
#pdf2_vec = np.vectorize(pdf2)

#plt.subplot(1, 2, 1)
#y = [0] * 1000
#y2 = [0] * 1000
#plt.subplot(1, 2, 2)
y = [0] * 1000
y2 = [0] * 1000
y3 = [0] * 1000

print("hello2")

#plt.xticks(np.linspace(0.0, 1.0, 11))
for i in range(0,1000):
    y[i] = gaussianDerivativeWRTMean1D(x[i], 0.799)
    #y2[i] = polyApprox(x[i],myRegions)
    y3[i] = polyApprox(x[i],myRegions2)
plt.plot(x, y, label='Derivative of a gaussian with respect to the mean, mean of 0.799')
plt.plot(x, y3, label='Polynomial approximation with evenly-sized regions')
for i in range(regionsBudget):
    plt.axvline(x=myRegions2[i][1], linestyle='--', color='red')
    #plt.axvline(x=myRegions[i][1], linestyle='--', color='red')
#plt.plot(x, y2, label='Polynomial approximation with adaptively-sized regions')
plt.legend()
plt.show()


#y = foo_vec(x)
#y2 = pdf_vec(x)

est = 0
#x = np.linspace(0.0, 1.0, 1000)
y = [0] * 1000
y2 = [0] * 1000
#fooCoefs = [0.34252596485104030988,40.373478800639617248,0.41481951205383099657,1.5401418457083917435,0.90731319362333173739,20.79972175384445876,0.65148028737933372234,51.340066572970592063]
#fooCoefs = [0.702400453854602147,50.504023186394000788,0.45295555709445656234,62.096501157973911234,0.22370818963690680681,24.208689887070761415,0.87206685308697196035,47.328547906014968305]
#fooCoefs = [0.60552367758166736333,10.994924155005476152,0.066656109992848516788,1.1645257770499917171,0.76824161565090720583,35.077295830035957636,0.82686686508002282814,7.6933851758133062759]
for i in range(0,1000):
    #y[i] = foo2(x[i])
    y[i] = gaussianDerivativeWRTMean1D(x[i], 0.799) - polyApprox(x[i],myRegions2)
    #est += foo2(x[i])
    #y2[i] = pdf2(x[i])
for i in range(regionsBudget):
    plt.axvline(x=myRegions2[i][1], linestyle='--', color='red')
    #plt.axvline(x=myRegions[i][1], linestyle='--', color='red')
plt.plot(x, y)
plt.show()
#est /= 10000
#print(est)
#plt.xticks(np.linspace(0.0, 1.0, 21))
#plt.plot(x, y)
#plt.plot(x, y2)

print("Hello5")

#plt.subplot(1, 2, 2)
#y = foo22_vec(x)
#y = foo_vec(x)
y = [0] * 1000
y2 = [0] * 1000
#est = 0
for i in range(0,1):
    #y[i] = foo2(invCdf2(x[i]))
    y[i] = foo2(x[i])
    y2[i] = polyApprox(x[i],myRegions)
    #y2[i] = pdf2(invCdf2(x[i]))
    #y2[i] = primaryFoo2(x[i])
    #est += primaryFoo2(x[i])
#est /= 10000
#print(est)
plt.plot(x, y)
plt.plot(x, y2)
for i in range(regionsBudget):
    plt.axvline(x=myRegions[i][1], linestyle='--', color='red')
#plt.show()

print(foo(invCdf(0.9)))
print(pdf(invCdf(0.9)))
print(invCdf(0.9))

x = np.linspace(0.0, 0.25, 100)
y = -2.08897 * x**2 - 0.560147 * x + 0.783074
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.25, linestyle='--', color='red')

x = np.linspace(0.25, 0.5, 100)
y = -3.38676 * x**2 + 3.61422 * x + -0.169406
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.5, linestyle='--', color='red')

x = np.linspace(0.5, 0.625, 100)
y = 8.45619 * x**2 + -6.32399 * x + 1.83896
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.625, linestyle='--', color='red')

x = np.linspace(0.625, 0.75, 100)
y = -6.11312 * x**2 + 3.64454 * x + 1.29977
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.75, linestyle='--', color='red')

x = np.linspace(0.75, 0.875, 100)
y = -50.6355 * x**2 + 83.3905 * x + -33.4658
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.875, linestyle='--', color='red')

x = np.linspace(0.875, 0.9375, 100)
y = -317.799 * x**2 + 571.103 * x + -255.667
#plt.plot(x, y, color='orange')
#plt.axvline(x=0.9375, linestyle='--', color='red')

x = np.linspace(0.9375, 1, 100)
y = -360.013 * x**2 + 702.895 * x + -342.12
#plt.plot(x, y, color='orange'

x2 = np.linspace(0, 1, 1000)
y2 = 1000 * [0]
#for i in range(1000):
#    y2[i] = polyApprox(x2[i], myRegions)

#y = polyApprox_vec(x, myRegions)
#plt.plot(x2, y2, color='red')

#plt.show()

x3 = [11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,55,57,59,63,67,69,73,77,81,85,89,93,99,103,109,115,121,127,133,141,147,155,163,171,181,189,199,209,219,231,243,255,269,283,297,313,329,345,363,381,401,421,443,465,489,515,541,569,597,629,661,695,731,767,807,849,891,937,985,1037,1089,1145,1203,1265,1331,1399,1471,1545,1625,1709,1795,1887,1985,2087,2193,2305,2423,2549,2679,2817,2961,3113,3271,3439,3617]
#y3 = [0.27354943163660988548,0.20009168635514038015,0.18945269270089937219,0.16356810162076296233,0.16713662249459668163,0.12589723208332473381,0.15118692322203711176,0.12010629017606354318,0.12672219107573465258,0.10836029219049626848,0.094435556486720140246,0.094841544420591880615,0.089871189298420209313,0.076366556977570179687,0.092086637296048226564,0.085035879220136528778,0.069513885824438140237,0.065383787256700659496,0.06972412928706848978,0.063522457186532335638,0.065188055574057809927,0.05599611183771885381,0.0596279653557413164,0.055260731053440849403,0.04646788588998036762,0.043233739655648625866,0.042924543701610966273,0.043591251202316154412,0.037681273485599270368,0.037786300587404758611,0.02555870003377403582,0.027781039373573485074,0.030437116456890688648,0.026462655013760126577,0.029532424243963639049,0.016582836725219769758,0.020887191215743075579,0.016663947353975531313,0.022251265172245373453,0.016987863131057334004,0.020407965396499163496,0.013837198924689105006,0.011579649644814563741,0.012229610330971868101,0.016573954836625597042,0.0091662821165309042726,0.0054506822282501254939,0.010911917776572134867,0.0093051911318283928032,0.0050781945100231646109,0.0069542878217764012364,0.0022234837475442240616,0.0041634538757811109452,0.0052436854133681562104,0.0057423349433208571713,0.0018241686023004835028,0.0017755801572005148851,0.012339040058888426157,0.00084647130772029532432,0.0017605294302423428812,0.0018658517407818954285,0.0028832431937128046549,0.00093543000013510764403,0.0023904478520142772441,0.002117825336818270586,9.2886461753815906641e-05,0.0015071581397415414506,0.00015698587204660349606,0.00022463299008047992226,6.2851508840061379667e-05,0.0001597566633451967717,0.0016975496975699219844,1.9175182904783185772e-05,0.0011729691168182465339,0.0028500094168024004554,0.00010987746465637594892,0.00020612146994828110975,1.4699149948989710494e-05,4.2771459932051822611e-05,7.9762821387413143203e-06,4.3113426081600556168e-05,5.7633449374612630203e-06,7.4593378108798322136e-05,8.1057364681268940696e-05,8.3542841410727497161e-06,4.561576052826192158e-06,4.9916046611829265685e-06,6.0116929087336699498e-06,4.9576054396185455049e-06,8.8446127786691835219e-06,5.957502580132979691e-06,6.0434581614975945731e-06,1.1734743450094704557e-05,1.8030922175756250599e-05,6.6769466745685116614e-06,2.1082104638775562232e-05,1.0549043341876264602e-05,1.3544108325437127525e-05,6.468281741250582962e-06,6.2076303165307939789e-06,1.6553215729006533121e-05,1.6434227732947082295e-05,7.467785719211465446e-06,5.5603319448493552851e-06,1.2705936753415755528e-05,6.0031808585085553933e-06]
#y4 = [0.27354943163660988548,0.19357272396233859979,0.20071384645920761769,0.18389610425074273681,0.19570230080784598026,0.16286083115601529547,0.17609482680860899517,0.093001647334248899179,0.094521193353742219423,0.069311558684451782253,0.071045559446378386825,0.065895236321646843969,0.064996762691129431055,0.057744477266457039377,0.059754760164119825883,0.058435487076895921421,0.054206718824296784565,0.040592787724541050387,0.045317310825542689301,0.019749964192588283923,0.019859907386484111635,0.014369241072710607979,0.011975733157815995206,0.012506592405159994499,0.011504685667090723544,0.0097808534505338298043,0.008673270612036442645,0.008704446525827939582,0.0079660069795175428992,0.0074191840363725374691,0.0069067629669145157861,0.007190842981965325266,0.0062693591319947540585,0.0059883244031870216939,0.0056244679537867259961,0.0049713217507421853317,0.0048740337405697225712,0.0049127345802560907703,0.0046629956908168096463,0.004603164722819012844,0.0041029887158811053846,0.0037189857547994405705,0.0038491782094890432744,0.003545973928698825748,0.0032605334045953042292,0.0031327669704752365669,0.0028966452614590850606,0.0028556805989734886271,0.0026816415165944445381,0.0026489734021141885141,0.0025773205153266803315,0.0024167266879205253488,0.0022355950531450195784,0.0020299981656885638694,0.0019757351014008999943,0.0019022584699827441157,0.0018333250672373383253,0.001781700322526992954,0.0016351646399829166366,0.0015934378772142062872,0.0014464293946077014935,0.0014314754489841085509,0.001358358348668057148,0.0013064828453086916194,0.0012629820010240696681,0.0012253420214998760225,0.0010861072688128294191,0.0010000823214915558271,0.0010546887380092561607,0.00097557559516124852782,0.00089177865896905637692,0.0008642852683333390653,0.00080301717347174223285,0.0007798479800307921584,0.00073340613508956619283,0.00072918336007800311441,0.00066866836712021094236,0.00065496162153302667133,0.00060608331508138382597,0.00059167306924498336198,0.00057091031936009858146,0.00050079315425739659787,0.00047464765569684157394,0.00046817920035082934236,0.00044819330286126839559,0.00040391105687512290001,0.00043315085877109821754,0.00036179045593639607694,0.00037266641368560293052,0.00034786518559495118201,0.00032934221466512366783,0.0003082055338252440266,0.00028704330890720017614,0.0002885607565722040713,0.00027926551083882594209,0.00025385041553600612083,0.00025269486118015727256,0.00025077961698497631222,0.00021240129005944285599,0.00021717226072144482727,0.00018956840052724801713,0.00020000449401921433531,0.00017315174510148617594,0.00016930011782754914506,0.0001534329028480183293,0.00015607819468720703516]
y3 = [0.33370246475289511157,0.23103928726467035104,0.24608974122096377579,0.20876745708666211154,0.22051091630028762935,0.20822980217616687826,0.21553920846756355334,0.10444504643493486562,0.102893664462029924,0.085116629055818501803,0.075961781570873659897,0.077121794594697437586,0.076112341213761133818,0.082622275290343771825,0.071471875775838494826,0.077638426324127748912,0.07382691582331882274,0.052169947817533181278,0.053987523341384992259,0.015606937609691944047,0.017180719814425055719,0.011193906211094782274,0.0088956835789883535043,0.0088302554721183083852,0.0071894554110804326924,0.0069956541192325990761,0.0068015323554328479747,0.0060061051091307663535,0.0053092383006297285547,0.0054364620817924352164,0.0055554458907396452386,0.0046573127904720856146,0.0043901933062752392448,0.0041675755408928103277,0.0042863071255025272585,0.0036511481764660213764,0.0036295482957335871606,0.0034269204760485789951,0.0033140441693811396873,0.0028678321218425228967,0.0029433710775162913106,0.0028479641391879534015,0.0026801115285524593906,0.0024688679520653900902,0.0024301177539118364729,0.0021254920638278940181,0.002015271096400832098,0.0020506293828852131117,0.0019735183002532637186,0.0019118177324407442403,0.0017943448682328432767,0.001586978351699224821,0.0016348042919323371464,0.0014880009311197821449,0.0013635780584580683029,0.0012615465312964776242,0.0012441558955834633362,0.0011105781912307335912,0.0011547972104689737879,0.0010621843203542187181,0.0010294296213896557673,0.00096744179056341170035,0.00094113116286310462017,0.00081956906163697398025,0.00089927995895254411556,0.00078841287420691231764,0.00079013875754652205651,0.00073448908269244800318,0.00071484149219622357928,0.00061585386298842060681,0.00061626975465074273867,0.0005874964105372903209,0.00055869453688449030333,0.00050982789556190525639,0.00050887426141229944766,0.00049940715485587117931,0.00043581125727970880046,0.00046293349301077468209,0.00043648575115103397087,0.00040953266943097169691,0.00038296939572703619448,0.0003343556582821788142,0.00034954031578754559892,0.00032067430214720641073,0.00032991507829845931115,0.00028087067635922162651,0.00027679474885993914004,0.00024348989068312425947,0.00027170294805834739865,0.00022243762910285623286,0.00023786425356763803542,0.00022368386275473491542,0.00020018179259346599737,0.00019146528829309451304,0.000182852766643880842,0.00016488945796385137059,0.00017820897770130195658,0.00015542742054714561131,0.00016071160936407169386,0.0001388377806431813897,0.00013839595226696447964,0.00013089784069436410322,0.00012662354467814839289,0.00012118169242416900442,0.00011362534622290395409,0.00010352906438939346611]
y4 = [0.33370246475289511157,0.25121544490972680386,0.25909544507515558376,0.20714908040981067083,0.21869360404925913821,0.20095887978759133241,0.20503763183378842516,0.19899467798670100738,0.17984615192030511954,0.15975908266922880796,0.17366058488301219787,0.15249536222377296779,0.15514410074191550826,0.13942120688306705589,0.13524458449103954338,0.13318067140597761311,0.12979947133258920577,0.12299119525518770191,0.11718531530623968462,0.10439782903965742766,0.11009907964573710515,0.095718201518727480392,0.10272546313408086049,0.098080277078161900994,0.094285728460084844427,0.082986763680260339227,0.083962499505802673516,0.080265941748447824922,0.06916722939996193531,0.072282364671023377478,0.065318788463328877891,0.071050398896708957808,0.060359737003495325669,0.063772244170272635033,0.06066268197771918641,0.050531073915843272015,0.053478453880915328977,0.041549627892691690101,0.038107146196661938198,0.032822532397324369335,0.037868818469818363304,0.042858319859335532176,0.024116415666305450471,0.035243463936780551615,0.027930245260581177541,0.037006803293948536959,0.020573486423939225942,0.020726837673798511469,0.017065738380531946666,0.041260147185487358601,0.02215716174901277008,0.021282633855648703386,0.02168102377633301589,0.014193705255964771117,0.022697751507426706941,0.0098841293333050712216,0.0097088149074604241512,0.026315042497200250016,0.0077606274968183624682,0.0054908101027952536943,0.0064135815088109619092,0.0080704227881462156646,0.0029472356054512805629,0.0065067471087070227753,0.0057573921113130048857,0.0070274658484354643462,0.0070083397214797914232,0.0023557993512124419423,0.0041334164094851107499,0.00058865784323524868778,0.0041018365683709676756,0.00098482347554476904958,0.00024085719689360114248,0.0037362224937685459963,0.0011321522170197159847,0.00032480106413901890751,0.0012544858084716137194,0.011213482704007012719,0.0006103711654304038196,4.8512167176749046308e-05,0.00024273001872650290783,3.9692180214833255598e-05,2.6861254052755340342e-05,0.0002343399310088393789,2.5265502605511496722e-05,4.9216712266506223636e-05,6.123528978711892173e-05,0.00030975863897852643327,4.7250262521971897087e-06,3.3065423384121696977e-06,4.0107978329427541582e-05,1.7391849393189095022e-05,1.9870712191113525325e-05,6.4281653746194856948e-06,5.8949551806983362462e-06,3.2599832649603485723e-06,1.5979942319093327761e-05,4.6971470737018644902e-06,5.3468055046944618273e-06,3.6476427969300640357e-06,5.1337045161274813654e-06,4.9878138864636672065e-06,4.6645034015797355353e-06,7.4342456986965281893e-06,2.0727326219256685797e-05,1.2105028058182293419e-05]
print(len(y3))
print(len(y4))
print(len(x3))
plt.scatter(x3, y3)
plt.scatter(x3, y4)
logX = np.log(x3)
logY = np.log(y3, out=np.zeros_like(y3), where=(y3!=0))
m, b = np.polyfit(logX, logY, 1)
print("Slope: ",m)
plt.yscale('log')
plt.xscale('log')
#plt.show()

# for x1 in np.arange(0.0,1.0,0.1):
#    for x2 in np.arange(0.0,1.0,0.1):
#        for x3 in np.arange(0.0,1.0,0.1):
#            if (w1Formula(x1,x2,x3) < 0):
#                print(w1Formula(x1,x2,x3))
