#include <iostream>
#include <functional>
#include <random>
#include <time.h>
#include <math.h>
#include <fstream> 
#include <queue>
#include <bits/stdc++.h>
#include <complex.h>
#include <algorithm>    //For random_shuffle
using namespace std;

//Poly Approx start

double determinant(double a, double b, double c, double d, double e, double f, double g, double h, double i) {
    return a * (e*i - h*f) - b * (d*i - g*f) + c * (d*h - g*e);
}

int compareArr(const void * arr1, const void * arr2) {
    return (((double**) arr1)[0][0] > ((double**) arr2)[0][0]) - (((double**) arr1)[0][0] < ((double**) arr2)[0][0]);
}

//Returns the integral from x=start to x=end of f(x) = ax^2 + bx + c
double polyInt(double start, double end, double a, double b, double c) {
    a /= 3;
    b /= 2;
    double integral = 0;
    integral += a * end * end * end;
    integral += b * end * end;
    integral += c * end;
    integral -= a * start * start * start;
    integral -= b * start * start;
    integral -= c * start;
    return integral;
}

double miniSimpsons(double intervalStart, double intervalEnd, function<double (double, double)> testFunc, double lambda) {
    return (testFunc(intervalStart, lambda) + 4 * testFunc((intervalStart + intervalEnd) / 2.0, lambda) + testFunc(intervalEnd, lambda)) * (intervalEnd - intervalStart) / 6.0;
}

double miniTrapezoidal(double intervalStart, double intervalEnd, function<double (double, double)> testFunc, double lambda) {
    return (intervalEnd - intervalStart) * (testFunc(intervalEnd, lambda) + testFunc(intervalStart, lambda)) / 2.0;
}

double estimateError(double intervalStart, double intervalEnd, function<double (double, double)> testFunc, double lambda) {
    return abs(miniSimpsons(intervalStart, intervalEnd, testFunc, lambda) - miniTrapezoidal(intervalStart, intervalEnd, testFunc, lambda)) + epsilon * (intervalEnd - intervalStart);
}

void getCoefs(double x1, double x3, function<double (double, double)> testFunc, double* coefs, double lambda) {
    //quadratic approximation
    double x2 = (x1 + x3) / 2.0;
    double y1 = testFunc(x1, lambda);
    double y2 = testFunc(x2, lambda);
    double y3 = testFunc(x3, lambda);

    double D = determinant(x1*x1, x1, 1, x2*x2, x2, 1, x3*x3, x3, 1);
    double Da = determinant(y1, x1, 1, y2, x2, 1, y3, x3, 1);
    double Db = determinant(x1*x1, y1, 1, x2*x2, y2, 1, x3*x3, y3, 1);
    double Dc = determinant(x1*x1, x1, y1, x2*x2, x2, y2, x3*x3, x3, y3);

    double a;
    double b;
    double c;
    if (D == 0) {
        //Just do a constant line
        a = 0;
        b = 0;
        c = y2;
    } else {
        a = Da / D;
        b = Db / D;
        c = Dc / D;
    }

    if (isinf(a)) {
        cout << "What????" << endl;
    }
    coefs[0] = a;
    coefs[1] = b;
    coefs[2] = c;
}

double** splitRegions(function<double (double, double)> testFunc, int regionsBudget, double lambda, double a, double b) {
    double** regions = new double*[regionsBudget];
    for (int i = 0; i < regionsBudget; i++) {
        regions[i] = new double[5];
    }
    int numRegions = 1;
    tuple<double, double, double> curr;
    priority_queue<tuple<double, double, double>> myHeap;
    //Each tuple has error estimate, startX, stopX
    myHeap.push(tuple<double, double, double>(estimateError(a, b, testFunc, lambda),a,b));
    double start, end, mid;
    while (numRegions < regionsBudget) {
        curr = myHeap.top();
        start = get<1>(curr);
        end = get<2>(curr);
        mid = (start + end) / 2;
        myHeap.pop();
        myHeap.push(tuple<double, double, double>(estimateError(start, mid, testFunc, lambda), start, mid));
        myHeap.push(tuple<double, double, double>(estimateError(mid, end, testFunc, lambda), mid, end));
        numRegions++;
    }
    for (int i = 0; i < regionsBudget; i++) {
        curr = myHeap.top();
        regions[i][0] = get<1>(curr);
        regions[i][1] = get<2>(curr);
        myHeap.pop();
        getCoefs(regions[i][0], regions[i][1], testFunc, &regions[i][2], lambda);
    }
    qsort(regions, regionsBudget, sizeof(regions[0]), compareArr);
    return regions;
}

double polyApproxEst(double** regions, double regionsBudget) {
    double estimate = 0;
    for (int i = 0; i < regionsBudget; i++) {
        estimate += polyInt(regions[i][0], regions[i][1], regions[i][2], regions[i][3], regions[i][4]);
        if (isnan(estimate) && regionsBudget == 134) {
            cout << "Estimate is no longer a number!\n";
            cout << regions[i][0] << ", " << regions[i][1] << ", " << regions[i][2] << ", " << regions[i][3] << ", " << regions[i][4] << endl;
        }
    }
    return estimate;
}

double estimateIntegralPolyApprox(double a, double b, int N, double lambda, function<double (double, double)> F, mt19937 & gen) {
    int regionsBudget = (N-1)/2;
    double** myRegions = splitRegions(F, regionsBudget, lambda, a, b);
    double result = polyApproxEst(myRegions, regionsBudget);
    delete myRegions;
    return result;
}

//Poly Approx end