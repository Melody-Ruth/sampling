import matplotlib.pyplot as plt
import numpy as np
from matplotlib.pyplot import figure

N, mc, an, un, unji, st, stan1, stan2, stan3, nr, mj, ha, haan, harot = np.loadtxt('conv.txt', delimiter=',', unpack=True)

logN = np.log(N, out=np.zeros_like(N), where=(N!=0))
logMc = np.log(mc, out=np.zeros_like(mc), where=(mc!=0))
logAn = np.log(an, out=np.zeros_like(an), where=(an!=0))
logUn = np.log(un, out=np.zeros_like(un), where=(un!=0))
logUnji = np.log(unji, out=np.zeros_like(unji), where=(unji!=0))
logSt = np.log(st, out=np.zeros_like(st), where=(st!=0))
logStan1 = np.log(stan1, out=np.zeros_like(stan1), where=(stan1!=0))
logStan2 = np.log(stan2, out=np.zeros_like(stan2), where=(stan2!=0))
logStan3 = np.log(stan3, out=np.zeros_like(stan3), where=(stan3!=0))
logHa = np.log(ha, out=np.zeros_like(ha), where=(ha!=0))
logHaan = np.log(haan, out=np.zeros_like(haan), where=(haan!=0))
logHarot = np.log(harot, out=np.zeros_like(harot), where=(harot!=0))
logNr = np.log(nr, out=np.zeros_like(nr), where=(nr!=0))
logMj = np.log(mj, out=np.zeros_like(mj), where=(mj!=0))

f = plt.figure()
f.set_figwidth(27)
f.set_figheight(15)
m, b = np.polyfit(logN, logMc, 1)
plt.plot(N, mc, linestyle='-', marker='.', label='Pure Monte Carlo (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logAn, 1)
plt.plot(N, an, linestyle='-', marker='.', label='Antithetic Monte Carlo (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logUn, 1)
plt.plot(N, un, linestyle='-', marker='.', label='Uniform (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logUnji, 1)
plt.plot(N, unji, linestyle='-', marker='.', label='Uniform Jitter (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logSt, 1)
plt.plot(N, st, linestyle='-', marker='.', label='Stratified (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logStan1, 1)
plt.plot(N, stan1, linestyle='-', marker='.', label='Stratified (locally antithetic) (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logStan2, 1)
plt.plot(N, stan2, linestyle='-', marker='.', label='Stratified (globally antithetic) (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logStan3, 1)
plt.plot(N, stan3, linestyle='-', marker='.', label='Stratified (locally and globally antithetic) (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logHa, 1)
plt.plot(N, ha, linestyle='-', marker='.', label='Halton (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logHarot, 1)
plt.plot(N, harot, linestyle='-', marker='.', label='Halton Rotated (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logHaan, 1)
plt.plot(N, haan, linestyle='-', marker='.', label='Halton Antithetic (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logNr, 1)
plt.plot(N, nr, linestyle='-', marker='.', label='N-Rooks (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logMj, 1)
plt.plot(N, mj, linestyle='-', marker='.', label='Multi-Jitter (approx rate: '+"{:.4f}".format(m)+')')
plt.yscale('log')
plt.xscale('log')

plt.xlabel('Number of Samples')
plt.ylabel('Error')
plt.title('2D convergence graphs')
plt.legend()
plt.savefig('basicGausStratAnt2D_v2.png')

logN = np.log(N, out=np.zeros_like(N), where=(N!=0))
logMc = np.log(mc, out=np.zeros_like(mc), where=(mc!=0))
logAn = np.log(an, out=np.zeros_like(an), where=(an!=0))
logUn = np.log(un, out=np.zeros_like(un), where=(un!=0))
logSt = np.log(st, out=np.zeros_like(st), where=(st!=0))
logHa = np.log(ha, out=np.zeros_like(ha), where=(ha!=0))
logNr = np.log(nr, out=np.zeros_like(nr), where=(nr!=0))
logMj = np.log(mj, out=np.zeros_like(mj), where=(mj!=0))
#plt.plot(np.log(np.arange(1,700)), np.log(np.power(np.arange(1.0,700.0),-0.5)), linestyle='-', label='N^-0.5')

m, b = np.polyfit(logN, logMc, 1)
plt.plot(N, mc, linestyle='-', marker='.', label='Pure Monte Carlo (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logAn, 1)
plt.plot(N, an, linestyle='-', marker='.', label='Antithetic Monte Carlo (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logUn, 1)
plt.plot(N, un, linestyle='-', marker='.', label='Uniform (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logSt, 1)
plt.plot(N, st, linestyle='-', marker='.', label='Stratified (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logHa, 1)
plt.plot(N, ha, linestyle='-', marker='.', label='Halton (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logNr, 1)
plt.plot(N, nr, linestyle='-', marker='.', label='N-Rooks (approx rate: '+"{:.4f}".format(m)+')')
m, b = np.polyfit(logN, logMj, 1)
plt.plot(N, mj, linestyle='-', marker='.', label='Multi-Jitter (approx rate: '+"{:.4f}".format(m)+')')
plt.yscale('log')
plt.xscale('log')

plt.xlabel('Number of Samples')
plt.ylabel('Error')
plt.title('2D convergence graphs (log scale)')
plt.legend()
plt.show()
